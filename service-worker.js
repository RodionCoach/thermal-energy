!function(){const e={};try{if(process)return process.env=Object.assign({},process.env),void Object.assign(process.env,e)}catch(e){}globalThis.process={env:e}}();try{self["workbox:core:6.0.2"]&&_()}catch(e){}"production"!==process.env.NODE_ENV&&(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const s=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...s,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},s=Object.keys(t);for(const e of s){const t=e;a[t]=(...e)=>{r(t,e)}}})();const e={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?a+".":""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:a,funcName:s,isReturnValueProblem:n})=>{if(!e||!r||!s)throw new Error("Unexpected input to 'incorrect-class' error.");return n?`The return value from '${r}.${a?a+".":""}${s}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${a?a+".":""}${s}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&a&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`};process.env.NODE_ENV;Error;process.env.NODE_ENV,"undefined"!=typeof registration&&registration.scope;const t={readonly:["get","count","getKey","getAll","getAllKeys"],readwrite:["add","put","clear","delete"]};for(const[e,r]of Object.entries(t))for(const e of r);try{self["workbox:core:6.1.5"]&&_()}catch(e){}const r={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?a+".":""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:a,funcName:s,isReturnValueProblem:n})=>{if(!e||!r||!s)throw new Error("Unexpected input to 'incorrect-class' error.");return n?`The return value from '${r}.${a?a+".":""}${s}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${a?a+".":""}${s}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&a&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},a="production"===process.env.NODE_ENV?(e,...t)=>{let r=e;return t.length>0&&(r+=` :: ${JSON.stringify(t)}`),r}:(e,t={})=>{const a=r[e];if(!a)throw new Error(`Unable to find message for code '${e}'.`);return a(t)};class s extends Error{constructor(e,t){super(a(e,t)),this.name=e,this.details=t}}const n="production"===process.env.NODE_ENV?null:{hasMethod:(e,t,r)=>{if("function"!==typeof e[t])throw r.expectedMethod=t,new s("missing-a-method",r)},isArray:(e,t)=>{if(!Array.isArray(e))throw new s("not-an-array",t)},isInstance:(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new s("incorrect-class",r)},isOneOf:(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new s("invalid-value",r)},isType:(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new s("incorrect-type",r)},isArrayOfClass:(e,t,r)=>{const a=new s("not-array-of-class",r);if(!Array.isArray(e))throw a;for(const r of e)if(!(r instanceof t))throw a}},o={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},i=e=>[o.prefix,e,o.suffix].filter((e=>e&&e.length>0)).join("-"),c=e=>e||i(o.precache),u=e=>e||i(o.runtime),h="production"===process.env.NODE_ENV?null:(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const s=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...s,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},s=Object.keys(t);for(const e of s){const t=e;a[t]=(...e)=>{r(t,e)}}return a})();function l(e,t){const r=t();return e.waitUntil(r),r}try{self["workbox:precaching:6.0.2"]&&_()}catch(e){}function d(e){if(!e)throw new s("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:r}=e;if(!r)throw new s("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(r,location.href);return{cacheKey:e.href,url:e.href}}const a=new URL(r,location.href),n=new URL(r,location.href);return a.searchParams.set("__WB_REVISION__",t),{cacheKey:a.href,url:n.href}}class p{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:r})=>{if("install"===e.type){const e=t.originalRequest.url;r?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return r}}}class m{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const r=t&&t.cacheKey||this._precacheController.getCacheKeyForURL(e.url);return r?new Request(r):e},this._precacheController=e}}function f(e){const t=e.length;t>0&&(h.groupCollapsed(`During precaching cleanup, ${t} cached request${1===t?" was":"s were"} deleted.`),((e,t)=>{h.groupCollapsed(e);for(const e of t)h.log(e);h.groupEnd()})("Deleted Cache Requests",e),h.groupEnd())}function g(e,t){if(0!==t.length){h.groupCollapsed(e);for(const e of t)h.log(e);h.groupEnd()}}let w;async function y(e,t){let r=null;if(e.url){r=new URL(e.url).origin}if(r!==self.location.origin)throw new s("cross-origin-copy-response",{origin:r});const a=e.clone(),n={headers:new Headers(a.headers),status:a.status,statusText:a.statusText},o=t?t(n):n,i=function(){if(void 0===w){const e=new Response("");if("body"in e)try{new Response(e.body),w=!0}catch(e){w=!1}w=!1}return w}()?a.body:await a.blob();return new Response(i,o)}const N=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");function v(e,t){const r=new URL(e);for(const e of t)r.searchParams.delete(e);return r.href}class b{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}const $=new Set;try{self["workbox:strategies:6.1.5"]&&_()}catch(e){}function E(e){return"string"==typeof e?new Request(e):e}class R{constructor(e,t){this._cacheKeys={},"production"!==process.env.NODE_ENV&&n.isInstance(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new b,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let r=E(e);if("navigate"===r.mode&&t instanceof FetchEvent&&t.preloadResponse){const e=await t.preloadResponse;if(e)return"production"!==process.env.NODE_ENV&&h.log(`Using a preloaded navigation response for '${N(r.url)}'`),e}const a=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))r=await e({request:r.clone(),event:t})}catch(e){throw new s("plugin-error-request-will-fetch",{thrownError:e})}const n=r.clone();try{let e;e=await fetch(r,"navigate"===r.mode?void 0:this._strategy.fetchOptions),"production"!==process.env.NODE_ENV&&h.debug(`Network request for '${N(r.url)}' returned a response with status '${e.status}'.`);for(const r of this.iterateCallbacks("fetchDidSucceed"))e=await r({event:t,request:n,response:e});return e}catch(e){throw"production"!==process.env.NODE_ENV&&h.log(`Network request for '${N(r.url)}' threw an error.`,e),a&&await this.runCallbacks("fetchDidFail",{error:e,event:t,originalRequest:a.clone(),request:n.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}async cacheMatch(e){const t=E(e);let r;const{cacheName:a,matchOptions:s}=this._strategy,n=await this.getCacheKey(t,"read"),o={...s,cacheName:a};r=await caches.match(n,o),"production"!==process.env.NODE_ENV&&(r?h.debug(`Found a cached response in '${a}'.`):h.debug(`No cached response found in '${a}'.`));for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await e({cacheName:a,matchOptions:s,cachedResponse:r,request:n,event:this.event})||void 0;return r}async cachePut(e,t){const r=E(e);var a;await(a=0,new Promise((e=>setTimeout(e,a))));const n=await this.getCacheKey(r,"write");if("production"!==process.env.NODE_ENV&&n.method&&"GET"!==n.method)throw new s("attempt-to-cache-non-get-request",{url:N(n.url),method:n.method});if(!t)throw"production"!==process.env.NODE_ENV&&h.error(`Cannot cache non-existent response for '${N(n.url)}'.`),new s("cache-put-with-no-response",{url:N(n.url)});const o=await this._ensureResponseSafeToCache(t);if(!o)return"production"!==process.env.NODE_ENV&&h.debug(`Response '${N(n.url)}' will not be cached.`,o),!1;const{cacheName:i,matchOptions:c}=this._strategy,u=await self.caches.open(i),l=this.hasCallback("cacheDidUpdate"),d=l?await async function(e,t,r,a){const s=v(t.url,r);if(t.url===s)return e.match(t,a);const n={...a,ignoreSearch:!0},o=await e.keys(t,n);for(const t of o)if(s===v(t.url,r))return e.match(t,a)}(u,n.clone(),["__WB_REVISION__"],c):null;"production"!==process.env.NODE_ENV&&h.debug(`Updating the '${i}' cache with a new Response for ${N(n.url)}.`);try{await u.put(n,l?o.clone():o)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){"production"!==process.env.NODE_ENV&&h.log(`About to run ${$.size} callbacks to clean up caches.`);for(const e of $)await e(),"production"!==process.env.NODE_ENV&&h.log(e,"is complete.");"production"!==process.env.NODE_ENV&&h.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:i,oldResponse:d,newResponse:o.clone(),request:n,event:this.event});return!0}async getCacheKey(e,t){if(!this._cacheKeys[t]){let r=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))r=E(await e({mode:t,request:r,event:this.event,params:this.params}));this._cacheKeys[t]=r}return this._cacheKeys[t]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const r=this._pluginStateMap.get(t),a=a=>{const s={...a,state:r};return t[e](s)};yield a}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve()}async _ensureResponseSafeToCache(e){let t=e,r=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,r=!0,!t)break;return r||(t&&200!==t.status&&(t=void 0),"production"!==process.env.NODE_ENV&&t&&200!==t.status&&(0===t.status?h.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):h.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}const x={cacheWillUpdate:async({response:e})=>e.redirected?await y(e):e};class T extends class{constructor(e={}){this.cacheName=u(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r="string"==typeof e.request?new Request(e.request):e.request,a="params"in e?e.params:void 0,s=new R(this,{event:t,request:r,params:a}),n=this._getResponse(s,r,t);return[n,this._awaitComplete(n,s,r,t)]}async _getResponse(e,t,r){let a;await e.runCallbacks("handlerWillStart",{event:r,request:t});try{if(a=await this._handle(t,e),!a||"error"===a.type)throw new s("no-response",{url:t.url})}catch(s){for(const n of e.iterateCallbacks("handlerDidError"))if(a=await n({error:s,event:r,request:t}),a)break;if(!a)throw s;"production"!==process.env.NODE_ENV&&h.log(`While responding to '${N(t.url)}', an ${s} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const s of e.iterateCallbacks("handlerWillRespond"))a=await s({event:r,request:t,response:a});return a}async _awaitComplete(e,t,r,a){let s,n;try{s=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:a,request:r,response:s}),await t.doneWaiting()}catch(e){n=e}if(await t.runCallbacks("handlerDidComplete",{event:a,request:r,response:s,error:n}),t.destroy(),n)throw n}}{constructor(e={}){e.cacheName=c(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(x)}async _handle(e,t){const r=await t.cacheMatch(e);return r||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let r;if(!this._fallbackToNetwork)throw new s("missing-precache-entry",{cacheName:this.cacheName,url:e.url});if("production"!==process.env.NODE_ENV&&h.warn(`The precached response for ${N(e.url)} in ${this.cacheName} was not found. Falling back to the network instead.`),r=await t.fetch(e),"production"!==process.env.NODE_ENV){const a=t.params&&t.params.cacheKey||await t.getCacheKey(e,"read");h.groupCollapsed("Precaching is responding to: "+N(e.url)),h.log(`Serving the precached url: ${N(a.url)}`),h.groupCollapsed("View request details here."),h.log(e),h.groupEnd(),h.groupCollapsed("View response details here."),h.log(r),h.groupEnd(),h.groupEnd()}return r}async _handleInstall(e,t){const r=await t.fetchAndCachePut(e);let a=Boolean(r);if(r&&r.status>=400&&!this._usesCustomCacheableResponseLogic()&&(a=!1),!a)throw new s("bad-precaching-response",{url:e.url,status:r.status});return r}_usesCustomCacheableResponseLogic(){return this.plugins.some((e=>e.cacheWillUpdate&&e!==x))}}class C{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:r=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new T({cacheName:c(e),plugins:[...t,new m({precacheController:this})],fallbackToNetwork:r}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){"production"!==process.env.NODE_ENV&&n.isArray(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const t=[];for(const r of e){"string"==typeof r?t.push(r):r&&void 0===r.revision&&t.push(r.url);const{cacheKey:e,url:a}=d(r),n="string"!=typeof r&&r.revision?"reload":"default";if(this._urlsToCacheKeys.has(a)&&this._urlsToCacheKeys.get(a)!==e)throw new s("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(a),secondEntry:e});if("string"!=typeof r&&r.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==r.integrity)throw new s("add-to-cache-list-conflicting-integrities",{url:a});this._cacheKeysToIntegrities.set(e,r.integrity)}if(this._urlsToCacheKeys.set(a,e),this._urlsToCacheModes.set(a,n),t.length>0){const e=`Workbox is precaching URLs without revision info: ${t.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;"production"===process.env.NODE_ENV?console.warn(e):h.warn(e)}}}install(e){return l(e,(async()=>{const t=new p;this.strategy.plugins.push(t);for(const[t,r]of this._urlsToCacheKeys){const a=this._cacheKeysToIntegrities.get(r),s=this._urlsToCacheModes.get(t),n=new Request(t,{integrity:a,cache:s,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:r},request:n,event:e}))}const{updatedURLs:r,notUpdatedURLs:a}=t;return"production"!==process.env.NODE_ENV&&function(e,t){const r=e.length,a=t.length;if(r||a){let s=`Precaching ${r} file${1===r?"":"s"}.`;a>0&&(s+=` ${a} file${1===a?" is":"s are"} already cached.`),h.groupCollapsed(s),g("View newly precached URLs.",e),g("View previously precached URLs.",t),h.groupEnd()}}(r,a),{updatedURLs:r,notUpdatedURLs:a}}))}activate(e){return l(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),r=new Set(this._urlsToCacheKeys.values()),a=[];for(const s of t)r.has(s.url)||(await e.delete(s),a.push(s.url));return"production"!==process.env.NODE_ENV&&f(a),{deletedURLs:a}}))}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}async matchPrecache(e){const t=e instanceof Request?e.url:e,r=this.getCacheKeyForURL(t);if(r){return(await self.caches.open(this.strategy.cacheName)).match(r)}}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new s("non-precached-url",{url:e});return r=>(r.request=new Request(e),r.params={cacheKey:t,...r.params},this.strategy.handle(r))}}let q;const O=()=>(q||(q=new C),q);try{self["workbox:routing:6.1.5"]&&_()}catch(e){}const U=["DELETE","GET","HEAD","PATCH","POST","PUT"],k=e=>e&&"object"==typeof e?("production"!==process.env.NODE_ENV&&n.hasMethod(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):("production"!==process.env.NODE_ENV&&n.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class D{constructor(e,t,r="GET"){"production"!==process.env.NODE_ENV&&(n.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),r&&n.isOneOf(r,U,{paramName:"method"})),this.handler=k(t),this.match=e,this.method=r}setCatchHandler(e){this.catchHandler=k(e)}}class L extends D{constructor(e,t,r){"production"!==process.env.NODE_ENV&&n.isInstance(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super((({url:t})=>{const r=e.exec(t.href);if(r){if(t.origin===location.origin||0===r.index)return r.slice(1);"production"!==process.env.NODE_ENV&&h.debug(`The regular expression '${e}' only partially matched against the cross-origin URL '${t}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),t,r)}}class V{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;"production"!==process.env.NODE_ENV&&h.debug("Caching URLs from the window",t.urlsToCache);const r=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const r=new Request(...t);return this.handleRequest({request:r,event:e})})));e.waitUntil(r),e.ports&&e.ports[0]&&r.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){"production"!==process.env.NODE_ENV&&n.isInstance(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const r=new URL(e.url,location.href);if(!r.protocol.startsWith("http"))return void("production"!==process.env.NODE_ENV&&h.debug("Workbox Router only supports URLs that start with 'http'."));const a=r.origin===location.origin,{params:s,route:o}=this.findMatchingRoute({event:t,request:e,sameOrigin:a,url:r});let i=o&&o.handler;const c=[];"production"!==process.env.NODE_ENV&&i&&(c.push(["Found a route to handle this request:",o]),s&&c.push(["Passing the following params to the route's handler:",s]));const u=e.method;if(!i&&this._defaultHandlerMap.has(u)&&("production"!==process.env.NODE_ENV&&c.push(`Failed to find a matching route. Falling back to the default handler for ${u}.`),i=this._defaultHandlerMap.get(u)),!i)return void("production"!==process.env.NODE_ENV&&h.debug(`No route found for: ${N(r)}`));let l;"production"!==process.env.NODE_ENV&&(h.groupCollapsed(`Router is responding to: ${N(r)}`),c.forEach((e=>{Array.isArray(e)?h.log(...e):h.log(e)})),h.groupEnd());try{l=i.handle({url:r,request:e,event:t,params:s})}catch(e){l=Promise.reject(e)}const d=o&&o.catchHandler;return l instanceof Promise&&(this._catchHandler||d)&&(l=l.catch((async a=>{if(d){"production"!==process.env.NODE_ENV&&(h.groupCollapsed(`Error thrown when responding to:  ${N(r)}. Falling back to route's Catch Handler.`),h.error("Error thrown by:",o),h.error(a),h.groupEnd());try{return await d.handle({url:r,request:e,event:t,params:s})}catch(e){a=e}}if(this._catchHandler)return"production"!==process.env.NODE_ENV&&(h.groupCollapsed(`Error thrown when responding to:  ${N(r)}. Falling back to global Catch Handler.`),h.error("Error thrown by:",o),h.error(a),h.groupEnd()),this._catchHandler.handle({url:r,request:e,event:t});throw a}))),l}findMatchingRoute({url:e,sameOrigin:t,request:r,event:a}){const s=this._routes.get(r.method)||[];for(const n of s){let s;const o=n.match({url:e,sameOrigin:t,request:r,event:a});if(o)return"production"!==process.env.NODE_ENV&&o instanceof Promise&&h.warn(`While routing ${N(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,n),s=o,(Array.isArray(o)&&0===o.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(s=void 0),{route:n,params:s}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,k(e))}setCatchHandler(e){this._catchHandler=k(e)}registerRoute(e){"production"!==process.env.NODE_ENV&&(n.isType(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n.hasMethod(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n.isType(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n.hasMethod(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),n.isType(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"})),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new s("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new s("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let P;function A(e,t,r){let a;if("string"==typeof e){const n=new URL(e,location.href);if("production"!==process.env.NODE_ENV){if(!e.startsWith("/")&&!e.startsWith("http"))throw new s("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const t=e.startsWith("http")?n.pathname:e,r="[*:?+]";new RegExp(`${r}`).exec(t)&&h.debug(`The '$capture' parameter contains an Express-style wildcard character (${r}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}a=new D((({url:t})=>("production"!==process.env.NODE_ENV&&t.pathname===n.pathname&&t.origin!==n.origin&&h.debug(`${e} only partially matches the cross-origin URL ${t}. This route will only handle cross-origin requests if they match the entire URL.`),t.href===n.href)),t,r)}else if(e instanceof RegExp)a=new L(e,t,r);else if("function"==typeof e)a=new D(e,t,r);else{if(!(e instanceof D))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=e}return(P||(P=new V,P.addFetchListener(),P.addCacheListener()),P).registerRoute(a),a}class S extends D{constructor(e,t){super((({request:r})=>{const a=e.getURLsToCacheKeys();for(const e of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:r="index.html",cleanURLs:a=!0,urlManipulation:s}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=function(e,t=[]){for(const r of[...e.searchParams.keys()])t.some((e=>e.test(r)))&&e.searchParams.delete(r);return e}(n,t);if(yield o.href,r&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=r,yield e.href}if(a){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(s){const e=s({url:n});for(const t of e)yield t.href}}(r.url,t)){const t=a.get(e);if(t)return{cacheKey:t}}"production"!==process.env.NODE_ENV&&h.debug("Precaching did not find a match for "+N(r.url))}),e.strategy)}}try{self["workbox:core:6.1.5"]&&_()}catch(e){}const W={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?a+".":""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:a,funcName:s,isReturnValueProblem:n})=>{if(!e||!r||!s)throw new Error("Unexpected input to 'incorrect-class' error.");return n?`The return value from '${r}.${a?a+".":""}${s}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${a?a+".":""}${s}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&a&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},M="production"===process.env.NODE_ENV?(e,...t)=>{let r=e;return t.length>0&&(r+=` :: ${JSON.stringify(t)}`),r}:(e,t={})=>{const r=W[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(t)};class H extends Error{constructor(e,t){super(M(e,t)),this.name=e,this.details=t}}const I="production"===process.env.NODE_ENV?null:{hasMethod:(e,t,r)=>{if("function"!==typeof e[t])throw r.expectedMethod=t,new H("missing-a-method",r)},isArray:(e,t)=>{if(!Array.isArray(e))throw new H("not-an-array",t)},isInstance:(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new H("incorrect-class",r)},isOneOf:(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new H("invalid-value",r)},isType:(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new H("incorrect-type",r)},isArrayOfClass:(e,t,r)=>{const a=new H("not-array-of-class",r);if(!Array.isArray(e))throw a;for(const r of e)if(!(r instanceof t))throw a}},K="production"===process.env.NODE_ENV?null:(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const s=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...s,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},s=Object.keys(t);for(const e of s){const t=e;a[t]=(...e)=>{r(t,e)}}return a})();try{self["workbox:routing:6.0.2"]&&_()}catch(e){}const B=["DELETE","GET","HEAD","PATCH","POST","PUT"],j=e=>e&&"object"==typeof e?("production"!==process.env.NODE_ENV&&I.hasMethod(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):("production"!==process.env.NODE_ENV&&I.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class F{constructor(e,t,r="GET"){"production"!==process.env.NODE_ENV&&(I.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),r&&I.isOneOf(r,B,{paramName:"method"})),this.handler=j(t),this.match=e,this.method=r}}class G extends F{constructor(e,t,r){"production"!==process.env.NODE_ENV&&I.isInstance(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super((({url:t})=>{const r=e.exec(t.href);if(r){if(t.origin===location.origin||0===r.index)return r.slice(1);"production"!==process.env.NODE_ENV&&K.debug(`The regular expression '${e}' only partially matched against the cross-origin URL '${t}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),t,r)}}const Y=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");class J{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;"production"!==process.env.NODE_ENV&&K.debug("Caching URLs from the window",t.urlsToCache);const r=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const r=new Request(...t);return this.handleRequest({request:r,event:e})})));e.waitUntil(r),e.ports&&e.ports[0]&&r.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){"production"!==process.env.NODE_ENV&&I.isInstance(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const r=new URL(e.url,location.href);if(!r.protocol.startsWith("http"))return void("production"!==process.env.NODE_ENV&&K.debug("Workbox Router only supports URLs that start with 'http'."));const a=r.origin===location.origin,{params:s,route:n}=this.findMatchingRoute({event:t,request:e,sameOrigin:a,url:r});let o=n&&n.handler;const i=[];"production"!==process.env.NODE_ENV&&o&&(i.push(["Found a route to handle this request:",n]),s&&i.push(["Passing the following params to the route's handler:",s]));const c=e.method;if(!o&&this._defaultHandlerMap.has(c)&&("production"!==process.env.NODE_ENV&&i.push(`Failed to find a matching route. Falling back to the default handler for ${c}.`),o=this._defaultHandlerMap.get(c)),!o)return void("production"!==process.env.NODE_ENV&&K.debug(`No route found for: ${Y(r)}`));let u;"production"!==process.env.NODE_ENV&&(K.groupCollapsed(`Router is responding to: ${Y(r)}`),i.forEach((e=>{Array.isArray(e)?K.log(...e):K.log(e)})),K.groupEnd());try{u=o.handle({url:r,request:e,event:t,params:s})}catch(e){u=Promise.reject(e)}return u instanceof Promise&&this._catchHandler&&(u=u.catch((a=>("production"!==process.env.NODE_ENV&&(K.groupCollapsed(`Error thrown when responding to:  ${Y(r)}. Falling back to Catch Handler.`),K.error("Error thrown by:",n),K.error(a),K.groupEnd()),this._catchHandler.handle({url:r,request:e,event:t}))))),u}findMatchingRoute({url:e,sameOrigin:t,request:r,event:a}){const s=this._routes.get(r.method)||[];for(const n of s){let s;const o=n.match({url:e,sameOrigin:t,request:r,event:a});if(o)return"production"!==process.env.NODE_ENV&&o instanceof Promise&&K.warn(`While routing ${Y(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,n),s=o,(Array.isArray(o)&&0===o.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(s=void 0),{route:n,params:s}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,j(e))}setCatchHandler(e){this._catchHandler=j(e)}registerRoute(e){"production"!==process.env.NODE_ENV&&(I.isType(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),I.hasMethod(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),I.isType(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),I.hasMethod(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),I.isType(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"})),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new H("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new H("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let z;const Q=()=>(z||(z=new J,z.addFetchListener(),z.addCacheListener()),z);try{self["workbox:core:6.1.5"]&&_()}catch(e){}const X={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?a+".":""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:a,funcName:s,isReturnValueProblem:n})=>{if(!e||!r||!s)throw new Error("Unexpected input to 'incorrect-class' error.");return n?`The return value from '${r}.${a?a+".":""}${s}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${a?a+".":""}${s}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&a&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},Z="production"===process.env.NODE_ENV?(e,...t)=>{let r=e;return t.length>0&&(r+=` :: ${JSON.stringify(t)}`),r}:(e,t={})=>{const r=X[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(t)};class ee extends Error{constructor(e,t){super(Z(e,t)),this.name=e,this.details=t}}const te="production"===process.env.NODE_ENV?null:{hasMethod:(e,t,r)=>{if("function"!==typeof e[t])throw r.expectedMethod=t,new ee("missing-a-method",r)},isArray:(e,t)=>{if(!Array.isArray(e))throw new ee("not-an-array",t)},isInstance:(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new ee("incorrect-class",r)},isOneOf:(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new ee("invalid-value",r)},isType:(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new ee("incorrect-type",r)},isArrayOfClass:(e,t,r)=>{const a=new ee("not-array-of-class",r);if(!Array.isArray(e))throw a;for(const r of e)if(!(r instanceof t))throw a}},re="production"===process.env.NODE_ENV?null:(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const s=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...s,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},s=Object.keys(t);for(const e of s){const t=e;a[t]=(...e)=>{r(t,e)}}return a})(),ae={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},se=e=>[ae.prefix,e,ae.suffix].filter((e=>e&&e.length>0)).join("-"),ne=e=>e||se(ae.runtime),oe=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");function ie(e,t){const r=new URL(e);for(const e of t)r.searchParams.delete(e);return r.href}class ce{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}const ue=new Set;try{self["workbox:strategies:6.0.2"]&&_()}catch(e){}function he(e){return"string"==typeof e?new Request(e):e}class le{constructor(e,t){this._cacheKeys={},"production"!==process.env.NODE_ENV&&te.isInstance(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new ce,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}fetch(e){return this.waitUntil((async()=>{const{event:t}=this;let r=he(e);if("navigate"===r.mode&&t instanceof FetchEvent&&t.preloadResponse){const e=await t.preloadResponse;if(e)return"production"!==process.env.NODE_ENV&&re.log(`Using a preloaded navigation response for '${oe(r.url)}'`),e}const a=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))r=await e({request:r.clone(),event:t})}catch(e){throw new ee("plugin-error-request-will-fetch",{thrownError:e})}const s=r.clone();try{let e;e=await fetch(r,"navigate"===r.mode?void 0:this._strategy.fetchOptions),"production"!==process.env.NODE_ENV&&re.debug(`Network request for '${oe(r.url)}' returned a response with status '${e.status}'.`);for(const r of this.iterateCallbacks("fetchDidSucceed"))e=await r({event:t,request:s,response:e});return e}catch(e){throw"production"!==process.env.NODE_ENV&&re.error(`Network request for '${oe(r.url)}' threw an error.`,e),a&&await this.runCallbacks("fetchDidFail",{error:e,event:t,originalRequest:a.clone(),request:s.clone()}),e}})())}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}cacheMatch(e){return this.waitUntil((async()=>{const t=he(e);let r;const{cacheName:a,matchOptions:s}=this._strategy,n=await this.getCacheKey(t,"read"),o={...s,cacheName:a};r=await caches.match(n,o),"production"!==process.env.NODE_ENV&&(r?re.debug(`Found a cached response in '${a}'.`):re.debug(`No cached response found in '${a}'.`));for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await e({cacheName:a,matchOptions:s,cachedResponse:r,request:n,event:this.event})||void 0;return r})())}async cachePut(e,t){const r=he(e);var a;await(a=0,new Promise((e=>setTimeout(e,a))));const s=await this.getCacheKey(r,"write");if("production"!==process.env.NODE_ENV&&s.method&&"GET"!==s.method)throw new ee("attempt-to-cache-non-get-request",{url:oe(s.url),method:s.method});if(!t)throw"production"!==process.env.NODE_ENV&&re.error(`Cannot cache non-existent response for '${oe(s.url)}'.`),new ee("cache-put-with-no-response",{url:oe(s.url)});const n=await this._ensureResponseSafeToCache(t);if(!n)return void("production"!==process.env.NODE_ENV&&re.debug(`Response '${oe(s.url)}' will not be cached.`,n));const{cacheName:o,matchOptions:i}=this._strategy,c=await self.caches.open(o),u=this.hasCallback("cacheDidUpdate"),h=u?await async function(e,t,r,a){const s=ie(t.url,r);if(t.url===s)return e.match(t,a);const n={...a,ignoreSearch:!0},o=await e.keys(t,n);for(const t of o)if(s===ie(t.url,r))return e.match(t,a)}(c,s.clone(),["__WB_REVISION__"],i):null;"production"!==process.env.NODE_ENV&&re.debug(`Updating the '${o}' cache with a new Response for ${oe(s.url)}.`);try{await c.put(s,u?n.clone():n)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){"production"!==process.env.NODE_ENV&&re.log(`About to run ${ue.size} callbacks to clean up caches.`);for(const e of ue)await e(),"production"!==process.env.NODE_ENV&&re.log(e,"is complete.");"production"!==process.env.NODE_ENV&&re.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:o,oldResponse:h,newResponse:n.clone(),request:s,event:this.event})}async getCacheKey(e,t){if(!this._cacheKeys[t]){let r=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))r=he(await e({mode:t,request:r,event:this.event,params:this.params}));this._cacheKeys[t]=r}return this._cacheKeys[t]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const r=this._pluginStateMap.get(t),a=a=>{const s={...a,state:r};return t[e](s)};yield a}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve()}async _ensureResponseSafeToCache(e){let t=e,r=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,r=!0,!t)break;return r||(t&&200!==t.status&&(t=void 0),"production"!==process.env.NODE_ENV&&t&&200!==t.status&&(0===t.status?re.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):re.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}const de=(e,t)=>`Using ${e} to respond to '${oe(t.url)}'`,pe=e=>{e&&(re.groupCollapsed("View the final response here."),re.log(e||"[No response returned]"),re.groupEnd())};var me;self.__WB_DISABLE_DEV_LOGS=!0,function(e){O().precache(e)}([...[{"revision":"7e10214efe174da2c7df43e7e8af37d0","url":"common.css"},{"revision":"58a117991869edd28204d272df700a7a","url":"index.html"},{"revision":"f83b69b1ea7e07d6afdde007ef5ab6d3","url":"index9983dc65-cced-456b-b1e6-2e8b3eda5ee0.js"},{"revision":"be0fc3cf1d5bf0f599755dc6db0fc4af","url":"service-worker-registration.js"}]]),function(e){const t=O();A(new S(t,e))}(me),self.addEventListener("activate",(()=>self.clients.claim())),self.skipWaiting(),function(e,t,r){let a;if("string"==typeof e){const s=new URL(e,location.href);if("production"!==process.env.NODE_ENV){if(!e.startsWith("/")&&!e.startsWith("http"))throw new H("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const t=e.startsWith("http")?s.pathname:e,r="[*:?+]";new RegExp(`${r}`).exec(t)&&K.debug(`The '$capture' parameter contains an Express-style wildcard character (${r}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}a=new F((({url:t})=>("production"!==process.env.NODE_ENV&&t.pathname===s.pathname&&t.origin!==s.origin&&K.debug(`${e} only partially matches the cross-origin URL ${t}. This route will only handle cross-origin requests if they match the entire URL.`),t.href===s.href)),t,r)}else if(e instanceof RegExp)a=new G(e,t,r);else if("function"==typeof e)a=new F(e,t,r);else{if(!(e instanceof F))throw new H("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=e}Q().registerRoute(a)}((({url:e})=>{const t=e.pathname.match(/assets\/*\/*.*(?:png|jpe?g|gif|mp4|svg)/);return!!t&&!!t.length}),new class extends class{constructor(e={}){this.cacheName=ne(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r="string"==typeof e.request?new Request(e.request):e.request,a="params"in e?e.params:void 0,s=new le(this,{event:t,request:r,params:a}),n=this._getResponse(s,r,t);return[n,this._awaitComplete(n,s,r,t)]}async _getResponse(e,t,r){let a;await e.runCallbacks("handlerWillStart",{event:r,request:t});try{if(a=await this._handle(t,e),!a||"error"===a.type)throw new ee("no-response",{url:t.url})}catch(s){for(const n of e.iterateCallbacks("handlerDidError"))if(a=await n({error:s,event:r,request:t}),a)break;if(!a)throw s;"production"!==process.env.NODE_ENV&&re.log(`While responding to '${oe(t.url)}', an ${s} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const s of e.iterateCallbacks("handlerWillRespond"))a=await s({event:r,request:t,response:a});return a}async _awaitComplete(e,t,r,a){let s,n;try{s=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:a,request:r,response:s}),await t.doneWaiting()}catch(e){n=e}if(await t.runCallbacks("handlerDidComplete",{event:a,request:r,response:s,error:n}),t.destroy(),n)throw n}}{async _handle(e,t){const r=[];"production"!==process.env.NODE_ENV&&te.isInstance(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let a,s=await t.cacheMatch(e);if(s)"production"!==process.env.NODE_ENV&&r.push(`Found a cached response in the '${this.cacheName}' cache.`);else{"production"!==process.env.NODE_ENV&&r.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{s=await t.fetchAndCachePut(e)}catch(e){a=e}"production"!==process.env.NODE_ENV&&(s?r.push("Got response from network."):r.push("Unable to get a response from the network."))}if("production"!==process.env.NODE_ENV){re.groupCollapsed(de(this.constructor.name,e));for(const e of r)re.log(e);pe(s),re.groupEnd()}if(!s)throw new ee("no-response",{url:e.url,error:a});return s}}({cacheName:"widget-cache"}));
